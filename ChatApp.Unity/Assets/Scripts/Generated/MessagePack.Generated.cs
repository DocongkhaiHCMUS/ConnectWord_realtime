// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Resolvers
{
    using System;

    public class GeneratedResolver : global::MessagePack.IFormatterResolver
    {
        public static readonly global::MessagePack.IFormatterResolver Instance = new GeneratedResolver();

        private GeneratedResolver()
        {
        }

        public global::MessagePack.Formatters.IMessagePackFormatter<T> GetFormatter<T>()
        {
            return FormatterCache<T>.Formatter;
        }

        private static class FormatterCache<T>
        {
            internal static readonly global::MessagePack.Formatters.IMessagePackFormatter<T> Formatter;

            static FormatterCache()
            {
                var f = GeneratedResolverGetFormatterHelper.GetFormatter(typeof(T));
                if (f != null)
                {
                    Formatter = (global::MessagePack.Formatters.IMessagePackFormatter<T>)f;
                }
            }
        }
    }

    internal static class GeneratedResolverGetFormatterHelper
    {
        private static readonly global::System.Collections.Generic.Dictionary<Type, int> lookup;

        static GeneratedResolverGetFormatterHelper()
        {
            lookup = new global::System.Collections.Generic.Dictionary<Type, int>(8)
            {
                { typeof(global::System.Collections.Generic.List<global::ChatApp.Shared.MessagePackObjects.Answer>), 0 },
                { typeof(global::System.Collections.Generic.List<global::ChatApp.Shared.MessagePackObjects.Player>), 1 },
                { typeof(global::ChatApp.Shared.MessagePackObjects.Answer), 2 },
                { typeof(global::ChatApp.Shared.MessagePackObjects.E2V), 3 },
                { typeof(global::ChatApp.Shared.MessagePackObjects.JoinRequest), 4 },
                { typeof(global::ChatApp.Shared.MessagePackObjects.MessageResponse), 5 },
                { typeof(global::ChatApp.Shared.MessagePackObjects.Player), 6 },
                { typeof(global::ChatApp.Shared.MessagePackObjects.Room), 7 },
            };
        }

        internal static object GetFormatter(Type t)
        {
            int key;
            if (!lookup.TryGetValue(t, out key))
            {
                return null;
            }

            switch (key)
            {
                case 0: return new global::MessagePack.Formatters.ListFormatter<global::ChatApp.Shared.MessagePackObjects.Answer>();
                case 1: return new global::MessagePack.Formatters.ListFormatter<global::ChatApp.Shared.MessagePackObjects.Player>();
                case 2: return new MessagePack.Formatters.ChatApp.Shared.MessagePackObjects.AnswerFormatter();
                case 3: return new MessagePack.Formatters.ChatApp.Shared.MessagePackObjects.E2VFormatter();
                case 4: return new MessagePack.Formatters.ChatApp.Shared.MessagePackObjects.JoinRequestFormatter();
                case 5: return new MessagePack.Formatters.ChatApp.Shared.MessagePackObjects.MessageResponseFormatter();
                case 6: return new MessagePack.Formatters.ChatApp.Shared.MessagePackObjects.PlayerFormatter();
                case 7: return new MessagePack.Formatters.ChatApp.Shared.MessagePackObjects.RoomFormatter();
                default: return null;
            }
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1649 // File name should match first type name




// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY MPC(MessagePack-CSharp). DO NOT CHANGE IT.
// </auto-generated>

#pragma warning disable 618
#pragma warning disable 612
#pragma warning disable 414
#pragma warning disable 168

#pragma warning disable SA1129 // Do not use default value type constructor
#pragma warning disable SA1200 // Using directives should be placed correctly
#pragma warning disable SA1309 // Field names should not begin with underscore
#pragma warning disable SA1312 // Variable names should begin with lower-case letter
#pragma warning disable SA1403 // File may only contain a single namespace
#pragma warning disable SA1649 // File name should match first type name

namespace MessagePack.Formatters.ChatApp.Shared.MessagePackObjects
{
    using System;
    using System.Buffers;
    using MessagePack;

    public sealed class AnswerFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::ChatApp.Shared.MessagePackObjects.Answer>
    {


        public void Serialize(ref MessagePackWriter writer, global::ChatApp.Shared.MessagePackObjects.Answer value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.answer, options);
            formatterResolver.GetFormatterWithVerify<global::ChatApp.Shared.MessagePackObjects.Player>().Serialize(ref writer, value.player, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.Room_ID, options);
        }

        public global::ChatApp.Shared.MessagePackObjects.Answer Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __answer__ = default(string);
            var __player__ = default(global::ChatApp.Shared.MessagePackObjects.Player);
            var __Room_ID__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __answer__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __player__ = formatterResolver.GetFormatterWithVerify<global::ChatApp.Shared.MessagePackObjects.Player>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __Room_ID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::ChatApp.Shared.MessagePackObjects.Answer(__answer__, __player__, __Room_ID__);
            ____result.answer = __answer__;
            ____result.player = __player__;
            ____result.Room_ID = __Room_ID__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class E2VFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::ChatApp.Shared.MessagePackObjects.E2V>
    {


        public void Serialize(ref MessagePackWriter writer, global::ChatApp.Shared.MessagePackObjects.E2V value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.word, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.pronounce, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.explain, options);
        }

        public global::ChatApp.Shared.MessagePackObjects.E2V Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __word__ = default(string);
            var __pronounce__ = default(string);
            var __explain__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __word__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __pronounce__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __explain__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::ChatApp.Shared.MessagePackObjects.E2V(__word__, __pronounce__, __explain__);
            ____result.word = __word__;
            ____result.pronounce = __pronounce__;
            ____result.explain = __explain__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class JoinRequestFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::ChatApp.Shared.MessagePackObjects.JoinRequest>
    {


        public void Serialize(ref MessagePackWriter writer, global::ChatApp.Shared.MessagePackObjects.JoinRequest value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.RoomName, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.RoomID, options);
            formatterResolver.GetFormatterWithVerify<global::ChatApp.Shared.MessagePackObjects.Player>().Serialize(ref writer, value.player, options);
        }

        public global::ChatApp.Shared.MessagePackObjects.JoinRequest Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __RoomName__ = default(string);
            var __RoomID__ = default(string);
            var __player__ = default(global::ChatApp.Shared.MessagePackObjects.Player);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __RoomName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __RoomID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __player__ = formatterResolver.GetFormatterWithVerify<global::ChatApp.Shared.MessagePackObjects.Player>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::ChatApp.Shared.MessagePackObjects.JoinRequest(__RoomName__, __RoomID__, __player__);
            ____result.RoomName = __RoomName__;
            ____result.RoomID = __RoomID__;
            ____result.player = __player__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class MessageResponseFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::ChatApp.Shared.MessagePackObjects.MessageResponse>
    {


        public void Serialize(ref MessagePackWriter writer, global::ChatApp.Shared.MessagePackObjects.MessageResponse value, global::MessagePack.MessagePackSerializerOptions options)
        {
            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(2);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.userName, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.answer, options);
        }

        public global::ChatApp.Shared.MessagePackObjects.MessageResponse Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                throw new InvalidOperationException("typecode is null, struct not supported");
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __userName__ = default(string);
            var __answer__ = default(string);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __userName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __answer__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::ChatApp.Shared.MessagePackObjects.MessageResponse(__userName__, __answer__);
            ____result.userName = __userName__;
            ____result.answer = __answer__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class PlayerFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::ChatApp.Shared.MessagePackObjects.Player>
    {


        public void Serialize(ref MessagePackWriter writer, global::ChatApp.Shared.MessagePackObjects.Player value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(3);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.userID, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.userName, options);
            writer.Write(value.score);
        }

        public global::ChatApp.Shared.MessagePackObjects.Player Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __userID__ = default(string);
            var __userName__ = default(string);
            var __score__ = default(int);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __userID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __userName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __score__ = reader.ReadInt32();
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::ChatApp.Shared.MessagePackObjects.Player(__userID__, __userName__, __score__);
            ____result.userID = __userID__;
            ____result.userName = __userName__;
            ____result.score = __score__;
            reader.Depth--;
            return ____result;
        }
    }

    public sealed class RoomFormatter : global::MessagePack.Formatters.IMessagePackFormatter<global::ChatApp.Shared.MessagePackObjects.Room>
    {


        public void Serialize(ref MessagePackWriter writer, global::ChatApp.Shared.MessagePackObjects.Room value, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (value == null)
            {
                writer.WriteNil();
                return;
            }

            IFormatterResolver formatterResolver = options.Resolver;
            writer.WriteArrayHeader(6);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.roomID, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.roomName, options);
            formatterResolver.GetFormatterWithVerify<string>().Serialize(ref writer, value.hostPlayer, options);
            writer.Write(value.numberPlayer);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::ChatApp.Shared.MessagePackObjects.Player>>().Serialize(ref writer, value.lstPlayer, options);
            formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::ChatApp.Shared.MessagePackObjects.Answer>>().Serialize(ref writer, value.List_answer, options);
        }

        public global::ChatApp.Shared.MessagePackObjects.Room Deserialize(ref MessagePackReader reader, global::MessagePack.MessagePackSerializerOptions options)
        {
            if (reader.TryReadNil())
            {
                return null;
            }

            options.Security.DepthStep(ref reader);
            IFormatterResolver formatterResolver = options.Resolver;
            var length = reader.ReadArrayHeader();
            var __roomID__ = default(string);
            var __roomName__ = default(string);
            var __hostPlayer__ = default(string);
            var __numberPlayer__ = default(int);
            var __lstPlayer__ = default(global::System.Collections.Generic.List<global::ChatApp.Shared.MessagePackObjects.Player>);
            var __List_answer__ = default(global::System.Collections.Generic.List<global::ChatApp.Shared.MessagePackObjects.Answer>);

            for (int i = 0; i < length; i++)
            {
                var key = i;

                switch (key)
                {
                    case 0:
                        __roomID__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 1:
                        __roomName__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 2:
                        __hostPlayer__ = formatterResolver.GetFormatterWithVerify<string>().Deserialize(ref reader, options);
                        break;
                    case 3:
                        __numberPlayer__ = reader.ReadInt32();
                        break;
                    case 4:
                        __lstPlayer__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::ChatApp.Shared.MessagePackObjects.Player>>().Deserialize(ref reader, options);
                        break;
                    case 5:
                        __List_answer__ = formatterResolver.GetFormatterWithVerify<global::System.Collections.Generic.List<global::ChatApp.Shared.MessagePackObjects.Answer>>().Deserialize(ref reader, options);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }

            var ____result = new global::ChatApp.Shared.MessagePackObjects.Room(__roomID__, __roomName__, __hostPlayer__, __numberPlayer__);
            ____result.roomID = __roomID__;
            ____result.roomName = __roomName__;
            ____result.hostPlayer = __hostPlayer__;
            ____result.numberPlayer = __numberPlayer__;
            ____result.lstPlayer = __lstPlayer__;
            ____result.List_answer = __List_answer__;
            reader.Depth--;
            return ____result;
        }
    }
}

#pragma warning restore 168
#pragma warning restore 414
#pragma warning restore 618
#pragma warning restore 612

#pragma warning restore SA1129 // Do not use default value type constructor
#pragma warning restore SA1200 // Using directives should be placed correctly
#pragma warning restore SA1309 // Field names should not begin with underscore
#pragma warning restore SA1312 // Variable names should begin with lower-case letter
#pragma warning restore SA1403 // File may only contain a single namespace
#pragma warning restore SA1649 // File name should match first type name

